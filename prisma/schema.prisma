// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                = "zod-prisma-types"
  output                  = "prisma/zod"
  prismaClientPath        = "@prisma/client"
  useTypeAssertions       = true
  prismaJsonNullability   = "nullable"
  createInputTypes        = false
  addIncludeType          = false
  addSelectType           = false
}
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL") 
}


model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  email     String?  @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  externalId String?
  createdAt DateTime @default(now())

  bots      Bot[]
  plans     Subscription[]
  exchangeCredentials ExchangeCredentials[]
}

model Bot {
  id            String    @id @default(cuid())
  name          String
  description   String
  strategy      String
  aiConfig      Json
  status        BotStatus @default(INACTIVE)
  promptVersion String?

  
  promptText    String?   @db.Text
  source        String?
  model         String?
  generatedAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  
  sessions TradingSession[]
  stats    BotStats?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
// --- AJOUT : Définition du statut d'un bot ---
enum BotStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  ERROR
}

model TradingSession {
  id         String   @id @default(uuid())
  botId      String
  startedAt  DateTime @default(now())
  endedAt    DateTime?
  performance Json?
  log        Json?

  bot        Bot      @relation(fields: [botId], references: [id])
}

// Nouvelle table pour la persistance des stats de trading en temps réel
model BotStats {
  id            String   @id @default(uuid())
  botId         String   @unique
  startedAt     DateTime @default(now())
  lastAction    DateTime?
  trades        Int      @default(0)
  profit        Float    @default(0.0)
  errors        Int      @default(0)
  winningTrades Int      @default(0)  // Nouveaux champs pour tracking des trades gagnants/perdants
  losingTrades  Int      @default(0)
  isRunning     Boolean  @default(false)
  sessionData   Json?    // Pour stocker des données additionnelles (positions, etc.)
  updatedAt     DateTime @updatedAt

  bot           Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  
  @@map("bot_stats")
}

model Subscription {
  id           String   @id @default(uuid())
  userId       String
  stripeId     String
  priceId      String
  status       String
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
}

// Modèle pour stocker les clés API des exchanges (Binance, etc.)
model ExchangeCredentials {
  id           String      @id @default(uuid())
  userId       String
  exchange     ExchangeType
  apiKey       String      // Clé API (en clair pour l'instant, chiffrement à implémenter)
  apiSecret    String      // Secret API (en clair pour l'instant, chiffrement à implémenter)
  isTestnet    Boolean     @default(true)
  isActive     Boolean     @default(true)
  label        String?     // Label personnalisé pour identifier les clés
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  lastUsed     DateTime?

  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, exchange, isTestnet]) // Un seul ensemble de clés par exchange et environnement par utilisateur
  @@map("exchange_credentials")
}

enum ExchangeType {
  BINANCE
  BINANCE_FUTURES
  // Futurs exchanges à ajouter
}

